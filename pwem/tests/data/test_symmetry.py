# **************************************************************************
# *
# * Authors:     roberto Marabini (roberto@cnb.csic.es)
# *
# * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 3 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
#
import numpy as np
import pyworkflow.tests as pwtests

import pwem.constants as emcts
import pwem.convert as emconv

try:
    from itertools import izip
except ImportError:
    izip = zip


class TestSymmetry(pwtests.unittest.TestCase):

    def assertArrayAlmostEqual(self, a1, a2, decimal=3):
        try:
            np.testing.assert_array_almost_equal(a1, a2, decimal=decimal)
            res = True
        except AssertionError as err:
            res = False
            print(err)
        self.assertTrue(res)

    def test_01_SymmetryCyclicSymmetryMatrices(self):
        n = 7
        matrices = emconv.getSymmetryMatrices(emcts.SYM_CYCLIC, n=n)
        refMatrices = []
        angle = 2 * np.pi / n
        for i in range(n):
            c = np.cos(angle * i)
            s = np.sin(angle * i)
            refMatrices.append([[c, -s, 0, 0],
                                [s, c, 0, 0],
                                [0, 0, 1.0, 0],
                                [0, 0, 0.0, 1.0]])
        for i, (m, r) in enumerate(izip(matrices, refMatrices)):
            print(f"Symmetry matrix {i}:\n ", m)
            self.assertArrayAlmostEqual(r, m)

    def test_02_SymmetryCyclicUnitCell(self):
        n = 7
        angle = 2 * np.pi / n
        vectorsEdge, vectorsPlane = emconv.getUnitCell(sym=emcts.SYM_CYCLIC,
                                                       n=n, 
                                                       circumscribed_radius=1, 
                                                       center=(0, 0, 0), 
                                                       offset=None)
        v = []
        v.append([np.cos(angle / 2.), np.sin(angle / 2.), 0])
        v.append([np.cos(-angle / 2.), np.sin(-angle / 2.), 0])
        for v, w in zip(v, vectorsEdge):
            self.assertArrayAlmostEqual(v, w, decimal=3)


    def test_10_SymmetryDihedralXSymmetryMatrices(self):
        n = 7
        angle = 2 * np.pi / n
        matrices = emconv.getSymmetryMatrices(emcts.SYM_DIHEDRAL_X, n=7)
        refMatrices = []
        # this are the matrices for the 7-fold dihedral symmetry
        for i in range(n):
            c = np.cos(angle * i)
            s = np.sin(angle * i)
            refMatrices.append([[c, -s, 0, 0],
                                [s, c, 0, 0],
                                [0, 0, 1.0, 0],
                                [0, 0, 0.0, 1.0]])

        # reflection x axis
        for i in range(n):
            mat = np.copy(refMatrices[i])
            
            mat[1][1] *= -1
            mat[1][0] *= -1
            mat[2][2] *= -1
            refMatrices.append(mat)

        for i, (m, r) in enumerate(izip(matrices, refMatrices)):
            print(f"Symmetry matrix {i}:\n ", m)
            self.assertArrayAlmostEqual(r, m)

    def test_11_SymmetryDihedralYSymmetryMatrices(self):
        n = 7
        angle = 2 * np.pi / n
        matrices = emconv.getSymmetryMatrices(emcts.SYM_DIHEDRAL_Y, n=7)
        refMatrices = []
        # this are the matrices for the 7-fold dihedral symmetry
        for i in range(n):
            c = np.cos(angle * i)
            s = np.sin(angle * i)
            refMatrices.append([[c, -s, 0, 0],
                                [s, c, 0, 0],
                                [0, 0, 1.0, 0],
                                [0, 0, 0.0, 1.0]])

        # reflection y axis
        for i in range(n):
            mat = np.copy(refMatrices[i])
            
            mat[0][0] *= -1
            mat[0][1] *= -1
            mat[2][2] *= -1
            refMatrices.append(mat)

        for i, (m, r) in enumerate(izip(matrices, refMatrices)):
            print(f"Symmetry matrix {i}:\n ", m)
            self.assertArrayAlmostEqual(r, m)

    def test_13_SymmetrydihedralXUnitCell(self):
        n = 7
        angle = np.pi / n  + np.pi/2.
        vectorsEdge, vectorsPlane = emconv.getUnitCell(sym=emcts.SYM_DIHEDRAL_X,
                                                       n=n, 
                                                       circumscribed_radius=1, 
                                                       center=(0, 0, 0), 
                                                       offset=None)
        v = []
        v.append([np.cos(angle), np.sin(angle), 0])
        v.append([-np.cos(angle), np.sin(angle), 0])
        v.append([0, 0, 1])
        for v, w in zip(v, vectorsEdge):
            self.assertArrayAlmostEqual(v, w, decimal=3)

    def test_14_SymmetrydihedralYUnitCell(self):
        n = 7
        angle = np.pi / n  + np.pi/2.
        vectorsEdge, vectorsPlane = emconv.getUnitCell(sym=emcts.SYM_DIHEDRAL_Y,
                                                       n=n, 
                                                       circumscribed_radius=1, 
                                                       center=(0, 0, 0), 
                                                       offset=None)
        v = []
        v.append([np.cos(angle), np.sin(angle), 0])
        v.append([-np.cos(angle), np.sin(angle), 0])
        v.append([0, 0, 1])
        for v, w in zip(v, vectorsEdge):
            self.assertArrayAlmostEqual(v, w, decimal=3)

    def test_21_SymmetryTetrahedral222SymmetryMatrices(self):
        n = 7
        matrices = emconv.getSymmetryMatrices(emcts.SYM_TETRAHEDRAL222, n=n)
        refMatrices = [
                       [[1.0, 0.0, 0,   0],  #0
                        [0.0, 1.0, 0,   0], 
                        [0,   0,   1.,  0],
                        [0,   0,   0,   1.]],
                       [[1.0, 0.0, 0,   0], #1
                        [0.0, -1.0, 0,  0],
                        [0,   0,   -1,  0],
                        [0,   0,   0,   1]],
                        [[-1.0, 0.0, 0,  0], #2
                            [0.0, 1.0, 0,   0],
                            [0,   0,   -1,  0],
                            [0,   0,   0,   1]],
                        [[-1.0, 0.0, 0,  0], #3
                            [0.0, -1.0, 0,  0],
                            [0,   0,   1,   0],
                            [0,   0,   0,   1]],
                        [[0.0, 0.0, 1.0,   0], #4
                            [1.0, 0.0, 0,   0],
                            [0,   1.0,   0,  0],
                            [0,   0,   0,   1]],
                            [[0.0, 1.0, 0.0,  0], #5
                            [0,   0,   1.0, 0],
                            [1.0, 0.0, 0,  0],
                            [0,   0,   0,   1]],
                        [[0.0, 0.0, -1.0,  0], #6
                            [1.0, 0.0, 0,   0],
                            [0,   -1.0,   0,  0],
                            [0,   0,   0,   1]],
                        [[0.0, 1.0, 0.0,   0], #7
                            [ 0,   0.0, -1,  0],
                            [-1.0, 0.0, 0,  0],
                            [0,   0,   0,   1]],
                        [[0.0, 0.0, 1.0,  0], #8
                            [ -1,   0.0, 0,  0],
                            [0,   -1.0, 0,  0],
                            [0,   0,   0,   1]],
                        [[0.0, -1.0, 0.0,   0], #9
                            [0.0, 0.0, -1.0,  0],
                            [1.0, 0.0, 0,   0],
                            [0,   0,   0,   1]],
                        [[0.0, 0.0, -1.0,   0], #10
                            [-1.0, 0.0, 0,  0],
                            [0,   1.0, 0.0,  0],
                            [0,   0,   0,   1]],
                        [[0.0, -1.0, 0.0,   0], #11
                            [0.0, 0.0, 1.0,  0],
                            [-1.0, 0.0, 0,  0],
                            [0,   0,   0,   1]],
        ]
        for i, (m, r) in enumerate(izip(matrices, refMatrices)):
             self.assertArrayAlmostEqual(r, m)

    def test_22_SymmetryTetrahedralZ3SymmetryMatrices(self):
        n = 7
        matrices = emconv.getSymmetryMatrices(emcts.SYM_TETRAHEDRAL_Z3, n=n)
        refMatrices = [
        [[ 1.,  0., -0.,  0.], #0
        [ 0.,  1., -0.,  0.],
        [ 0., -0.,  1.,  0.],
        [ 0.,  0.,  0.,  1.]],
        [[ 0.,        0.57735,   0.816497,  0.      ], #1
        [ 0.57735,  -0.666667,  0.471405,  0.      ],
        [ 0.816497,  0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.,       -0.57735,  -0.816497,  0.      ], #2
        [-0.57735,  -0.666667,  0.471405,  0.      ],
        [-0.816497,  0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-1.,        0.,       -0.,        0.      ], #3
        [ 0.,        0.333333, -0.942809,  0.      ],
        [ 0.,       -0.942809, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,      -0.866025,  0.,        0.      ], #4
        [ 0.866025, -0.5,      -0.,        0.      ],
        [ 0.,        0.,        1.,        0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,       0.866025, 0.,        0.      ], #5
        [-0.866025, -0.5,       0.,        0.      ],
        [ 0.,        0.,        1.,        0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,      0.288675, -0.816497,  0.      ], #6
        [-0.288675,  0.833333,  0.471405,  0.      ],
        [ 0.816497,  0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,      -0.288675,  0.816497,  0.      ], #7
        [ 0.288675,  0.833333,  0.471405,  0.      ],
        [-0.816497,  0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[ 0.5,      -0.288675,  0.816497,  0.      ], #8
        [-0.866025, -0.166667,  0.471405,  0.      ],
        [-0.,       -0.942809, -0.333333,  0.      ],
        [ 0.,        0.,       0.,        1.      ]],
        [[ 0.5,      -0.866025, 0.,        0.      ], #9
        [-0.288675, -0.166667, -0.942809,  0.      ],
        [ 0.816497,  0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[ 0.5,      0.866025, -0.,        0.      ], #10
        [ 0.288675, -0.166667, -0.942809,  0.      ],
        [-0.816497,  0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[ 0.5,       0.288675, -0.816497,  0.      ], #11
        [ 0.866025, -0.166667,  0.471405,  0.      ],
        [-0.,       -0.942809, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]]
         ]
        for i, (m, r) in enumerate(izip(matrices, refMatrices)):
             print(f"Symmetry matrix {i}:\n ", m)
             self.assertArrayAlmostEqual(r, m)

    def test_23_SymmetryTetrahedralZ3RSymmetryMatrices(self):
        n = 7
        matrices = emconv.getSymmetryMatrices(emcts.SYM_TETRAHEDRAL_Z3R, n=n)
        refMatrices = [
        [[ 1., 0.,  0.,   0.], #0
        [ 0.,  1., -0.,  0.],
        [ 0., -0.,  1.,  0.],
        [ 0.,  0.,  0.,  1.]],
        [[ 0.,          0.57735,  -0.816497,  0.      ], #1
        [  0.57735,   -0.666667, -0.471405,  0.      ],
        [  -0.816497,  -0.471405, -0.333333,  0.      ],
        [  0.,          0.,        0.,        1.      ]],
        [[-0.,       -0.57735,  0.816497,  0.      ], #2
        [-0.57735,  -0.666667, -0.471405,  0.      ],
        [ 0.816497, -0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-1.,        0.,       -0.,        0.      ], #3
        [ 0.,        0.333333, 0.942809,  0.      ],
        [ 0.,       0.942809, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,      -0.866025,  0.,        0.      ], #4
        [ 0.866025, -0.5,      -0.,        0.      ],
        [ 0.,        0.,        1.,        0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,       0.866025, 0.,        0.      ], #5
        [-0.866025, -0.5,       0.,        0.      ],
        [ 0.,        0.,        1.,        0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,      0.288675,  0.816497,  0.      ], #6
        [-0.288675,  0.833333,  -0.471405,  0.      ],
        [ -0.816497,  -0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[-0.5,      -0.288675,  -0.816497,  0.      ], #7
        [ 0.288675,  0.833333,  -0.471405,  0.      ],
        [0.816497,  -0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[0.5,      -0.288675,  -0.816497,  0.      ], #8
        [-0.866025, -0.166667,  -0.471405,  0.      ],
        [-0.,        0.942809, -0.333333,  0.      ],
        [ 0.,        0.,       0.,        1.      ]],
        [[ 0.5,      -0.866025, 0.,        0.      ], #9
        [-0.288675, -0.166667,  0.942809,  0.      ],
        [-0.816497, -0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[ 0.5,      0.866025, -0.,        0.      ], #10
        [ 0.288675, -0.166667,  0.942809,  0.      ],
        [ 0.816497, -0.471405, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]],
        [[ 0.5,       0.288675, 0.816497,  0.      ], #11
        [ 0.866025, -0.166667,  -0.471405,  0.      ],
        [-0.,        0.942809, -0.333333,  0.      ],
        [ 0.,        0.,        0.,        1.      ]]
         ]
        for i, (m, r) in enumerate(izip(matrices, refMatrices)):
             print(f"Symmetry matrix {i}:\n ", m)
             self.assertArrayAlmostEqual(r, m)


    def test_24_SymmetryTetahedralUnitCell(self):
        vectorsEdge, vectorsPlane = emconv.getUnitCell(sym=emcts.SYM_TETRAHEDRAL_222,
                                                       circumscribed_radius=1, 
                                                       center=(0, 0, 0))
        
        print("vectorsEdge", vectorsEdge)
        print("vectorsPlane", vectorsPlane)
        #for v, w in zip(v, vectorsEdge):
        #    self.assertArrayAlmostEqual(v, w, decimal=3)


    def testSymmetryOctahedral(self):
        matrices = emconv.getSymmetryMatrices(emcts.SYM_OCTAHEDRAL)
        refMatrices = [
            [[1., 0., 0., 0.],  # 0
             [0., 1., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]],
            [[0., -1., 0., 0.],  # 1
             [1., 0., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]],
            [[-1., 0., 0., 0.],  # 2
             [0., -1., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]],
            [[0., 1., 0., 0.],  # 3
             [-1., 0., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]],

            [[1., 0., 0., 0.],  # 4
             [0., 0., -1., 0.],
             [0., 1., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., -1., 0., 0.],  # 5
             [0., 0., -1., 0.],
             [1., 0., 0., 0.],
             [0., 0., 0., 1.]],
            [[-1., 0., 0., 0.],  # 6
             [0., 0., -1., 0.],
             [0., -1., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 1., 0., 0.],  # 7
             [0., 0., -1., 0.],
             [-1., 0., 0., 0.],
             [0., 0., 0., 1.]],

            [[1., 0., 0., 0.],  # 8
             [0., -1., 0., 0.],
             [0., 0., -1., 0.],
             [0., 0., 0., 1.]],
            [[0., -1., 0., 0.],  # 9
             [-1., 0., 0., 0.],
             [0., 0., -1., 0.],
             [0., 0., 0., 1.]],
            [[-1., 0., 0., 0.],  # 10
             [0., 1., 0., 0.],
             [0., 0., -1., 0.],
             [0., 0., 0., 1.]],
            [[0., 1., 0., 0.],  # 11
             [1., 0., 0., 0.],
             [0., 0., -1., 0.],
             [0., 0., 0., 1.]],

            [[1., 0., 0., 0.],  # 12
             [0., 0., 1., 0.],
             [0., -1., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., -1., 0., 0.],  # 13
             [0., 0., 1., 0.],
             [-1., 0., 0., 0.],
             [0., 0., 0., 1.]],
            [[-1., 0., 0., 0.],  # 14
             [0., 0., 1., 0.],
             [0., 1., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 1., 0., 0.],  # 15
             [0., 0., 1., 0.],
             [1., 0., 0., 0.],
             [0., 0., 0., 1.]],

            [[0., 0., 1., 0.],  # 16
             [0., 1., 0., 0.],
             [-1., 0., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 0., 1., 0.],  # 17
             [1., 0., 0., 0.],
             [0., 1., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 0., 1., 0.],  # 18
             [0., -1., 0., 0.],
             [1., 0., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 0., 1., 0.],  # 19
             [-1., 0., 0., 0.],
             [0., -1., 0., 0.],
             [0., 0., 0., 1.]],

            [[0., 0., -1., 0.],  # 20
             [0., 1., 0., 0.],
             [1., 0., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 0., -1., 0.],  # 21
             [1., 0., 0., 0.],
             [0., -1., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 0., -1., 0.],  # 22
             [0., -1., 0., 0.],
             [-1., 0., 0., 0.],
             [0., 0., 0., 1.]],
            [[0., 0., -1., 0.],  # 23
             [-1., 0., 0., 0.],
             [0., 1., 0., 0.],
             [0., 0., 0., 1.]],
        ]

        for m1, m2 in zip(matrices[:len(refMatrices)], refMatrices):
            self.assertArrayAlmostEqual(m1, m2)


    def testSymmetryIcosahedral222(self):
        matrices = emconv.getSymmetryMatrices(emcts.SYM_I222)
        refMatrices = [
            [[1., 0., 0., 0.],  # 1
             [0., 1., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, -0.5, 0.30901699, 0.],  # 2
             [-0.5, 0.30901699, -0.80901699, 0.],
             [0.30901699, -0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[0., 1., 0., 0.],  # 3
             [0., 0., -1., 0.],
             [-1., 0., 0., 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, -0.5, -0.30901699, 0.],  # 4
             [-0.5, -0.30901699, -0.80901699, 0.],
             [0.30901699, 0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.5, 0.30901699, -0.80901699, 0.],  # 5
             [-0.30901699, -0.80901699, -0.5, 0.],
             [-0.80901699, 0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, -0.80901699, -0.5, 0.],  # 6
             [-0.80901699, 0.5, -0.30901699, 0.],
             [0.5, 0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, 0.5, -0.30901699, 0.],  # 7
             [0.5, 0.30901699, -0.80901699, 0.],
             [-0.30901699, -0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, -0.5, -0.30901699, 0.],  # 8
             [0.5, -0.30901699, -0.80901699, 0.],
             [0.30901699, -0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, 0.80901699, -0.5, 0.],  # 9
             [-0.80901699, -0.5, -0.30901699, 0.],
             [-0.5, 0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[0.5, -0.30901699, -0.80901699, 0.],  # 10
             [-0.30901699, 0.80901699, -0.5, 0.],
             [0.80901699, 0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0., 0., -1., 0.],  # 11
             [-1., 0., 0., 0.],
             [0., 1., 0., 0.],
             [0., 0., 0., 1.]],

            [[-0.5, -0.30901699, -0.80901699, 0.],  # 12
             [0.30901699, 0.80901699, -0.5, 0.],
             [0.80901699, -0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.5, 0.30901699, -0.80901699, 0.],  # 13
             [0.30901699, -0.80901699, -0.5, 0.],
             [-0.80901699, -0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, -0.80901699, -0.5, 0.],  # 14
             [0.80901699, -0.5, 0.30901699, 0.],
             [-0.5, -0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, 0.5, -0.30901699, 0.],  # 15
             [-0.5, -0.30901699, 0.80901699, 0.],
             [0.30901699, 0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.5, 0.30901699, -0.80901699, 0.],  # 16
             [0.30901699, 0.80901699, 0.5, 0.],
             [0.80901699, -0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.5, 0.30901699, -0.80901699, 0.],  # 17
             [-0.30901699, 0.80901699, 0.5, 0.],
             [0.80901699, 0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0., 0., -1., 0.],
             [1., 0., 0., 0.],
             [0., -1., 0., 0.],
             [0., 0., 0., 1.]],

            [[-0.5, -0.30901699, -0.80901699, 0.],
             [-0.30901699, -0.80901699, 0.5, 0.],
             [-0.80901699, 0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0., -1., 0., 0.],
             [0., 0., 1., 0.],
             [-1., 0., 0., 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, 0.5, 0.30901699, 0.],
             [0.5, 0.30901699, 0.80901699, 0.],
             [0.30901699, 0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, 0.5, -0.30901699, 0.],
             [0.5, -0.30901699, 0.80901699, 0.],
             [0.30901699, -0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, 0.80901699, -0.5, 0.],
             [0.80901699, 0.5, 0.30901699, 0.],
             [0.5, -0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[0.5, -0.30901699, -0.80901699, 0.],
             [0.30901699, -0.80901699, 0.5, 0.],
             [-0.80901699, -0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, -0.5, -0.30901699, 0.],
             [-0.5, 0.30901699, 0.80901699, 0.],
             [-0.30901699, 0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, -0.80901699, 0.5, 0.],
             [-0.80901699, 0.5, 0.30901699, 0.],
             [-0.5, -0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, 0.80901699, 0.5, 0.],
             [0.80901699, 0.5, -0.30901699, 0.],
             [-0.5, 0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[1., 0., 0., 0.],
             [0., -1., 0., 0.],
             [0., 0., -1., 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, 0.80901699, -0.5, 0.],
             [0.80901699, -0.5, -0.30901699, 0.],
             [-0.5, -0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, -0.80901699, -0.5, 0.],
             [-0.80901699, -0.5, 0.30901699, 0.],
             [-0.5, 0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-1., 0., 0., 0.],
             [0., 1., 0., 0.],
             [0., 0., -1., 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, 0.5, -0.30901699, 0.],
             [-0.5, 0.30901699, -0.80901699, 0.],
             [-0.30901699, 0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[0., -1., 0., 0.],
             [0., 0., -1., 0.],
             [1., 0., 0., 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, 0.5, 0.30901699, 0.],
             [-0.5, -0.30901699, -0.80901699, 0.],
             [-0.30901699, -0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.5, -0.30901699, 0.80901699, 0.],
             [-0.30901699, -0.80901699, -0.5, 0.],
             [0.80901699, -0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, 0.80901699, 0.5, 0.],
             [-0.80901699, 0.5, -0.30901699, 0.],
             [-0.5, -0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, -0.5, 0.30901699, 0.],
             [0.5, 0.30901699, -0.80901699, 0.],
             [0.30901699, 0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, 0.5, 0.30901699, 0.],
             [0.5, -0.30901699, -0.80901699, 0.],
             [-0.30901699, 0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, -0.80901699, 0.5, 0.],
             [-0.80901699, -0.5, -0.30901699, 0.],
             [0.5, -0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.5, 0.30901699, 0.80901699, 0.],
             [-0.30901699, 0.80901699, -0.5, 0.],
             [-0.80901699, -0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0., 0., 1., 0.],
             [-1., 0., 0., 0.],
             [0., -1., 0., 0.],
             [0., 0., 0., 1.]],

            [[0.5, 0.30901699, 0.80901699, 0.],
             [0.30901699, 0.80901699, -0.5, 0.],
             [-0.80901699, 0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0.5, -0.30901699, 0.80901699, 0.],
             [0.30901699, -0.80901699, -0.5, 0.],
             [0.80901699, 0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, 0.80901699, 0.5, 0.],
             [0.80901699, -0.5, 0.30901699, 0.],
             [0.5, 0.30901699, -0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, -0.5, 0.30901699, 0.],
             [-0.5, -0.30901699, 0.80901699, 0.],
             [-0.30901699, -0.80901699, -0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.5, -0.30901699, 0.80901699, 0.],
             [0.30901699, 0.80901699, 0.5, 0.],
             [-0.80901699, 0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0.5, -0.30901699, 0.80901699, 0.],
             [-0.30901699, 0.80901699, 0.5, 0.],
             [-0.80901699, -0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0., 0., 1., 0.],
             [1., 0., 0., 0.],
             [0., 1., 0., 0.],
             [0., 0., 0., 1.]],

            [[0.5, 0.30901699, 0.80901699, 0.],
             [-0.30901699, -0.80901699, 0.5, 0.],
             [0.80901699, -0.5, -0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0., 1., 0., 0.],
             [0., 0., 1., 0.],
             [1., 0., 0., 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, -0.5, -0.30901699, 0.],
             [0.5, 0.30901699, 0.80901699, 0.],
             [-0.30901699, -0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[-0.80901699, -0.5, 0.30901699, 0.],
             [0.5, -0.30901699, 0.80901699, 0.],
             [-0.30901699, 0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, -0.80901699, 0.5, 0.],
             [0.80901699, 0.5, 0.30901699, 0.],
             [-0.5, 0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.5, 0.30901699, 0.80901699, 0.],
             [0.30901699, -0.80901699, 0.5, 0.],
             [0.80901699, 0.5, 0.30901699, 0.],
             [0., 0., 0., 1.]],

            [[0.80901699, 0.5, 0.30901699, 0.],
             [-0.5, 0.30901699, 0.80901699, 0.],
             [0.30901699, -0.80901699, 0.5, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, 0.80901699, -0.5, 0.],
             [-0.80901699, 0.5, 0.30901699, 0.],
             [0.5, 0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[0.30901699, -0.80901699, -0.5, 0.],
             [0.80901699, 0.5, -0.30901699, 0.],
             [0.5, -0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-1., 0., 0., 0.],
             [0., -1., 0., 0.],
             [0., 0., 1., 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, -0.80901699, 0.5, 0.],
             [0.80901699, -0.5, -0.30901699, 0.],
             [0.5, 0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]],

            [[-0.30901699, 0.80901699, 0.5, 0.],
             [-0.80901699, -0.5, 0.30901699, 0.],
             [0.5, -0.30901699, 0.80901699, 0.],
             [0., 0., 0., 1.]]
        ]

        for m1, m2 in izip(matrices[:len(refMatrices)], refMatrices):
            self.assertArrayAlmostEqual(m1, m2)
